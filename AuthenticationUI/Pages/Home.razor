@page "/"
@using AuthenticationUI.Models
@using AuthenticationDll.Services
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<PageTitle>Authentication</PageTitle>

<div class="container my-5">
    <h1 class="text-center mb-4">Hello, Users</h1>
    <p class="text-center mb-4">Welcome to the Authentication Website!</p>

    <!-- Buttons -->
    <div class="text-center mb-4">
        <a href="/SignUp" class="btn btn-primary btn-lg mx-2">Sign Up</a>
        <a href="/LogIn" class="btn btn-secondary btn-lg mx-2">Sign In</a>
    </div>

    <!-- Search Box -->
    <div class="mb-4">
        <div class="input-group">
            <select class="form-select" @bind="SearchCriteria">
                <option value="Username">Username</option>
                <option value="UserId">User ID</option>
            </select>
            <input type="text" class="form-control" placeholder="Search..." @bind="SearchQuery" @oninput="OnSearchInput" />
        </div>
    </div>

    <!-- Users Table -->
    @if (FilteredUsers == null || FilteredUsers.Count == 0)
    {
        <div class="alert alert-info text-center">
            <strong>No users found 😢</strong>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>
                            User ID
                            <button class="btn btn-sm btn-light" @onclick="() => SortById(true)">
                                <i class="bi bi-arrow-up"></i>
                            </button>
                            <button class="btn btn-sm btn-light" @onclick="() => SortById(false)">
                                <i class="bi bi-arrow-down"></i>
                            </button>
                        </th>
                        <th>
                            Username
                            <button class="btn btn-sm btn-light" @onclick="() => SortByUsername(true)">
                                <i class="bi bi-arrow-up"></i>
                            </button>
                            <button class="btn btn-sm btn-light" @onclick="() => SortByUsername(false)">
                                <i class="bi bi-arrow-down"></i>
                            </button>
                        </th>
                        <th>Password</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in FilteredUsers)
                    {
                        <tr>
                            <td>@user.UserId</td>
                            <td>@user.Username</td>
                            <td>@user.Password</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    public List<User> Users { get; set; } = new List<User>();
    public List<User> FilteredUsers { get; set; } = new List<User>();
    public string SearchQuery { get; set; } = string.Empty;
    public string SearchCriteria { get; set; } = "Username";

    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
    }

    public async Task GetAllUsers()
    {
        Users = await HttpClient.GetFromJsonAsync<List<User>>("http://localhost:5218/api/Authentication");
        FilteredUsers = Users; // Initialize the filtered list
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterUsers();
    }

    private void FilterUsers()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            FilteredUsers = Users;
        }
        else
        {
            if (SearchCriteria == "Username")
            {
                FilteredUsers = Users
                    .Where(u => u.Username.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else if (SearchCriteria == "UserId" && int.TryParse(SearchQuery, out int userId))
            {
                FilteredUsers = Users
                    .Where(u => u.UserId == userId)
                    .ToList();
            }
        }
    }

    // Sort by User ID
    public void SortById(bool ascending)
    {
        if (ascending)
        {
            FilteredUsers = FilteredUsers.OrderBy(u => u.UserId).ToList();
        }
        else
        {
            FilteredUsers = FilteredUsers.OrderByDescending(u => u.UserId).ToList();
        }
    }

    // Sort by Username
    public void SortByUsername(bool ascending)
    {
        if (ascending)
        {
            FilteredUsers = FilteredUsers.OrderBy(u => u.Username).ToList();
        }
        else
        {
            FilteredUsers = FilteredUsers.OrderByDescending(u => u.Username).ToList();
        }
    }
}
